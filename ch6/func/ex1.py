# 더하기 함수 만들기
# 함수 정의
# def 함수이름(매개변수): ...
# 매개변수: 함수에 필요한 입력값(예를 들어 숫자 2개)
# 반환값: 결과
def add(a, b):
    return a+b # 반환값

# 함수 사용 (함수 호출)
sum = add(3,4) # 함수이름(입력값)
print('결과:', sum)

# ------------------------------------------------

# 두 개의 숫자를 입력받아 곱한 값을 반환하는 함수를 작성하고 호출
# ex) 2,5 => 10
def mul(a,b):
    return a*b

# 함수의 매개변수의 개수에 맞게 입력
result = mul(2,5)
print('결과:', result)

# -----------------------------
# 함수의 여러가지 형태
# 1. 입력값 없고, 반환값도 없는 함수
# 인사를 출력하는 함수 만들기
def hello():
    print('안녕하세요')

# 함수 호출
hello()
# -----------------------------
# 2. 입력값도 있고, 리턴값도 있는 함수
# 두 수를 더하는 함수
def add(a,b):
    return a+b
# 함수를 호출할때, 두 숫자를 입력하고
# 호출이 끝난 후에, 결과를 받아야함
result = add(3,4)
# ------------------------------
# 3. 입력값 없고, 리턴값만 있는 함수
# 인사를 반환하는 함수
def say():
    return 'hi'
# 리턴값이 있으면 결과를 받아야함
string = say()
print(string) #'hi'
# ------------------------------
# 4. 입력값 있고, 반환값은 없는 함수
# 두 수를 더하고 결과를 바로 출력하는 함수
# 함수를 정의할때는 a와 b를 '매개변수'라고 부른다
def add(a,b):
    print(a+b)
# 매개변수가 있으면 개수에 맞게 입력
# 함수를 호출할때는 3과 4를 '인자'라고 부른다.
add(3,4)
# -------------------------
# 이름을 입력받아 환영 인사를 출력하는 함수 작성
# ex) '둘리' -> '둘리님, 환영합니다!'
def say(name):
    print(name , '님, 환영합니다!')
say('둘리')

# 이름과 인사말을 받아 '이름 + 인사말' 형태의 문자열
# ex) '둘리', '안녕하세요' -> '둘리님, 안녕하세요'
# ex) '또치', 'hi~~' -> '또치님, hi~~'
def fun(name, msg):
    # 문자열 연결 방법: +, f-str
    print(f'{name}님, {msg}')
fun('또치','hi~~')
# --------------------------------
# 함수 응용하기
# 입력한 숫자만큼 '안녕하세요' 출력하기
# 입력값: 반복횟수
def hello(cnt):
    # 3번 출력하기
    for n in range(cnt): #f10
        print('안녕하세요') #f10
# 매개변수가 있으면 입력값을 넣어서 함수를 호출
hello(10) #f11
# ----------------------------------
# 두 개의 숫자를 입력받아,
# 첫 번째 수에서 두 번째 수까지의 합을 반환하는 함수를 작성하세요
# ex) 5, 10 => 5+6+7+8+9+10 = 45
def fun(a,b):
    sum = 0
    for n in range(a,b+1):
        sum = sum + n
    print(sum)
fun(5,10)

# --------------------------------------
# 두 개의 숫자를 입력받아,
# 첫 번째 수에서 두 번째 수를 뺀 결과를 반환하는 함수
# 단, 첫 번째 수가 두 번째 수보다 작으면 -999를 반환
# ex) 20, 10 -> 10
# ex) 10, 20 -> -999
def func(a,b):
    if a < b :
        return -999
    else: return a-b
result = func(20,10)
print(result)

# 리턴값O -> 결과를 함수 내부에서 처리하지 않고 반환
# 반환받는 쪽에서 처리해야 함!
# 함수 내부에서 결과 처리 : return x
# 함수를 사용하는 쪽에서 결과 처리: return o
def sub(n1, n2):
    if n1 < n2:
        return -999
    else :
        return n1-n2
# 반환값이 있으면 받기
result1 = sub(20,10)
print(f'결과:{result1}')
result2 = sub(10,20)
print(f'잘못된 결과:{result2}')

# 함수 내부에서 return 키워드 여러번 작성할 수 있지만,
# 함수 내부에서 return을 한번만 만날 수 있다.
# 단, 조건문과 함께 사용할 때만
def sub(n1, n2):
    return -999
    return n1 - n2

# 숫자를 입력 받아 짝수인지 홀수인지 알려주는 함수
n1 = int(input('숫자를 입력하세요: '))
def func(n1):
    if n1 % 2 == 0:
        print('짝수')
    else :
        print('홀수')

func(n1)

# 블록을 가지는 것: 함수, if, for
# 블록을 들여쓰기로 구분: space x tab o
# 블록은 변수의 scope

a = 10 # 전역변수
if a%2 == 0:
    b=5 # 지역변수
    print(b)
print(a)

for n in range(10):
    print(n) #지역변수

def fun(x,y):
    print(x,y) #지역변수

fun(2,3)
# print(x,y)
# 함수 블록 안에서 선언된 x,y는 지역변수로
# 함수 밖에서는 사용할 수 없다.